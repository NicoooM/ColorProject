{"version":3,"sources":["style\\vendors\\_locomotive-scroll.scss","style\\base\\_reset.scss","style\\base\\_typography.scss","style\\vendors\\_media.scss","style\\layout\\_animations.scss","style\\layout\\_layout.scss","style\\abstracts\\_variables.scss","style\\components\\_button.scss","style\\pages\\_home.scss"],"names":[],"mappings":"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","file":"main.3d6386d6.css","sourceRoot":"..\\src","sourcesContent":["/*! locomotive-scroll v4.1.1 | MIT License | https://github.com/locomotivemtl/locomotive-scroll */\r\nhtml.has-scroll-smooth {\r\n  overflow: hidden;\r\n}\r\n\r\nhtml.has-scroll-dragging {\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.has-scroll-smooth body {\r\n  overflow: hidden;\r\n}\r\n\r\n.has-scroll-smooth [data-scroll-container] {\r\n  min-height: 100vh;\r\n}\r\n\r\n[data-scroll-direction=\"horizontal\"] [data-scroll-container] {\r\n  height: 100vh;\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n}\r\n\r\n[data-scroll-direction=\"horizontal\"] [data-scroll-section] {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  white-space: nowrap;\r\n  height: 100%;\r\n}\r\n\r\n.c-scrollbar {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 11px;\r\n  height: 100%;\r\n  transform-origin: center right;\r\n  transition: transform 0.3s, opacity 0.3s;\r\n  opacity: 0;\r\n}\r\n.c-scrollbar:hover {\r\n  transform: scaleX(1.45);\r\n}\r\n.c-scrollbar:hover,\r\n.has-scroll-scrolling .c-scrollbar,\r\n.has-scroll-dragging .c-scrollbar {\r\n  opacity: 1;\r\n}\r\n[data-scroll-direction=\"horizontal\"] .c-scrollbar {\r\n  width: 100%;\r\n  height: 10px;\r\n  top: auto;\r\n  bottom: 0;\r\n  transform: scaleY(1);\r\n}\r\n[data-scroll-direction=\"horizontal\"] .c-scrollbar:hover {\r\n  transform: scaleY(1.3);\r\n}\r\n\r\n.c-scrollbar_thumb {\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: black;\r\n  opacity: 0.5;\r\n  width: 7px;\r\n  border-radius: 10px;\r\n  margin: 2px;\r\n  cursor: -webkit-grab;\r\n  cursor: grab;\r\n}\r\n.has-scroll-dragging .c-scrollbar_thumb {\r\n  cursor: -webkit-grabbing;\r\n  cursor: grabbing;\r\n}\r\n[data-scroll-direction=\"horizontal\"] .c-scrollbar_thumb {\r\n  right: auto;\r\n  bottom: 0;\r\n}\r\n","/* http://meyerweb.com/eric/tools/css/reset/ \r\n   v2.0 | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml,\r\nbody,\r\ndiv,\r\nspan,\r\napplet,\r\nobject,\r\niframe,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6,\r\np,\r\nblockquote,\r\npre,\r\na,\r\nabbr,\r\nacronym,\r\naddress,\r\nbig,\r\ncite,\r\ncode,\r\ndel,\r\ndfn,\r\nem,\r\nimg,\r\nins,\r\nkbd,\r\nq,\r\ns,\r\nsamp,\r\nsmall,\r\nstrike,\r\nstrong,\r\nsub,\r\nsup,\r\ntt,\r\nvar,\r\nb,\r\nu,\r\ni,\r\ncenter,\r\ndl,\r\ndt,\r\ndd,\r\nol,\r\nul,\r\nli,\r\nfieldset,\r\nform,\r\nlabel,\r\nlegend,\r\ntable,\r\ncaption,\r\ntbody,\r\ntfoot,\r\nthead,\r\ntr,\r\nth,\r\ntd,\r\narticle,\r\naside,\r\ncanvas,\r\ndetails,\r\nembed,\r\nfigure,\r\nfigcaption,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmenu,\r\nnav,\r\noutput,\r\nruby,\r\nsection,\r\nsummary,\r\ntime,\r\nmark,\r\naudio,\r\nvideo {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n\r\n/* HTML5 display-role reset for older browsers */\r\n\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmenu,\r\nnav,\r\nsection {\r\n  display: block;\r\n}\r\n\r\nbody {\r\n  line-height: 1;\r\n}\r\n\r\nol,\r\nul {\r\n  list-style: none;\r\n}\r\n\r\nblockquote,\r\nq {\r\n  quotes: none;\r\n}\r\n\r\nblockquote {\r\n  &:before,\r\n  &:after {\r\n    content: \"\";\r\n    content: none;\r\n  }\r\n}\r\n\r\nq {\r\n  &:before,\r\n  &:after {\r\n    content: \"\";\r\n    content: none;\r\n  }\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n","@font-face {\r\n  font-family: \"Baskervville\";\r\n  src: url(./base/fonts/Baskervville-Regular.ttf);\r\n}\r\n\r\n@font-face {\r\n  font-family: \"Biryani\";\r\n  src: url(./base/fonts/Biryani-Regular.ttf);\r\n}\r\n\r\nh1,\r\nh2 {\r\n  font-family: \"Baskervville\";\r\n}\r\n\r\nh3,\r\np,\r\nlabel {\r\n  font-family: \"Biryani\";\r\n}\r\n\r\nh1 {\r\n  font-size: 54.93px;\r\n  @include media(\"<=desktop\") {\r\n    font-size: 96px;\r\n  }\r\n  @include media(\"<=tablet\") {\r\n    font-size: 72px;\r\n  }\r\n  @include media(\"<=phone\") {\r\n    font-size: 48px;\r\n  }\r\n}\r\nh2 {\r\n  font-size: 60.75px;\r\n  @include media(\"<=desktop\") {\r\n    font-size: 72px;\r\n  }\r\n  @include media(\"<=tablet\") {\r\n    font-size: 48px;\r\n  }\r\n  @include media(\"<=phone\") {\r\n    font-size: 36px;\r\n  }\r\n}\r\nh3 {\r\n  font-size: 40.5px;\r\n  @include media(\"<=desktop\") {\r\n    font-size: 72px;\r\n  }\r\n  @include media(\"<=tablet\") {\r\n    font-size: 48px;\r\n  }\r\n  @include media(\"<=phone\") {\r\n    font-size: 36px;\r\n  }\r\n}\r\n\r\np {\r\n  font-size: 18px;\r\n  @include media(\"<=tablet\") {\r\n    font-size: 14px;\r\n  }\r\n  @include media(\"<=phone\") {\r\n    font-size: 12px;\r\n  }\r\n}\r\n\r\nlabel {\r\n  font-size: 14px;\r\n  @include media(\"<=tablet\") {\r\n    font-size: 12px;\r\n  }\r\n  @include media(\"<=phone\") {\r\n    font-size: 10px;\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  \"phone\": 320px,\r\n  \"tablet\": 768px,\r\n  \"desktop\": 1024px,\r\n) !default;\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  \"screen\": \"screen\",\r\n  \"print\": \"print\",\r\n  \"handheld\": \"handheld\",\r\n  \"landscape\": \"(orientation: landscape)\",\r\n  \"portrait\": \"(orientation: portrait)\",\r\n  \"retina2x\":\r\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\r\n  \"retina3x\":\r\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\r\n) !default;\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  \"px\": 1,\r\n  \"em\": 0.01,\r\n  \"rem\": 0.1,\r\n  \"\": 0,\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: \"desktop\" !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists(\"at-error\") {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {\r\n  }\r\n}\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {\r\n}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\r\n    }\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\r\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\r\n      {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log(\"No operator found in `#{$expression}`.\");\r\n}\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: \"width\";\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\r\n}\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\r\n  }\r\n\r\n  @if $operator == \">\" {\r\n    $value: $value + $interval;\r\n  } @else if $operator == \"<\" {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == \"number\" {\r\n    @return $value;\r\n  } @else if type-of($value) != \"string\" {\r\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == \"-\");\r\n  $numbers: (\r\n    \"0\": 0,\r\n    \"1\": 1,\r\n    \"2\": 2,\r\n    \"3\": 3,\r\n    \"4\": 4,\r\n    \"5\": 5,\r\n    \"6\": 6,\r\n    \"7\": 7,\r\n    \"8\": 8,\r\n    \"9\": 9,\r\n  );\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == \"+\" or $first-character == \"-\") {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\r\n    }\r\n\r\n    @if $character == \".\" {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: (\r\n    \"px\": 1px,\r\n    \"cm\": 1cm,\r\n    \"mm\": 1mm,\r\n    \"%\": 1%,\r\n    \"ch\": 1ch,\r\n    \"pc\": 1pc,\r\n    \"in\": 1in,\r\n    \"em\": 1em,\r\n    \"rem\": 1rem,\r\n    \"pt\": 1pt,\r\n    \"ex\": 1ex,\r\n    \"vw\": 1vw,\r\n    \"vh\": 1vh,\r\n    \"vmin\": 1vmin,\r\n    \"vmax\": 1vmax,\r\n  );\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge(\r\n    $media-expressions,\r\n    $tweak-media-expressions\r\n  ) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\r\n  {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","@keyframes Scroll {\r\n  0% {\r\n    transform: translateY(0%);\r\n  }\r\n  20% {\r\n    transform: translateY(-10%);\r\n  }\r\n  40% {\r\n    transform: translateY(0%);\r\n  }\r\n  60% {\r\n    transform: translateY(-5%);\r\n  }\r\n  80% {\r\n    transform: translateY(0%);\r\n  }\r\n  100% {\r\n    transform: translateY(0%);\r\n  }\r\n}\r\n\r\n// @keyframes ScrollCircle {\r\n//   0% {\r\n//     border-top: 1px solid $blanc;\r\n//   }\r\n//   33% {\r\n//     border-right: 1px solid $blanc;\r\n//   }\r\n//   66% {\r\n//     border-bottom: 1px solid $blanc;\r\n//   }\r\n//   100% {\r\n//     border-left: 1px solid $blanc;\r\n//   }\r\n// }\r\n","html {\r\n  scroll-behavior: smooth;\r\n}\r\n\r\nbody {\r\n  background-color: $background;\r\n  color: $blanc;\r\n}\r\n","$primary: #fbe0ff;\r\n$blanc: #f0f0f0;\r\n$noir: #434343;\r\n$background: #171717;\r\n",".btn {\r\n  border: none;\r\n}\r\n","header {\r\n  padding: 10px;\r\n  height: 10vh;\r\n  span {\r\n    font-size: 72px;\r\n    line-height: 75%;\r\n  }\r\n}\r\n\r\nmain {\r\n  .landing {\r\n    height: 90vh;\r\n    text-align: center;\r\n    h1 {\r\n      position: absolute;\r\n      font-size: 270px;\r\n      color: transparent;\r\n      -webkit-text-stroke: 1px $blanc;\r\n      top: 10%;\r\n      transform: rotate(-90deg) translateY(-130%);\r\n    }\r\n    .landing__text {\r\n      margin: 35vh auto 0 auto;\r\n      width: 50%;\r\n      display: flex;\r\n      flex-direction: column;\r\n      font-family: \"Baskervville\";\r\n      font-size: 30px;\r\n      q {\r\n        text-align: center;\r\n        display: block;\r\n        margin-bottom: 4rem;\r\n      }\r\n      .landing__author {\r\n        align-self: flex-end;\r\n        font-style: italic;\r\n      }\r\n    }\r\n    .landing__scroll {\r\n      display: inline-block;\r\n      margin: 10vh auto 0 auto;\r\n      text-align: center;\r\n      cursor: pointer;\r\n      position: relative;\r\n      // &:hover::after {\r\n      // animation-name: ScrollCircle;\r\n      // animation-duration: 3s;\r\n      // animation-fill-mode: forwards;\r\n      // animation-iteration-count: infinite;\r\n      // animation-timing-function: ease-in-out;\r\n      // transform: translateY(-50%) translateX(-50%) scaleX(1) scaleY(1);\r\n      // }\r\n      // &::after {\r\n      //   content: \"\";\r\n      //   border-radius: 50%;\r\n      //   border: 1px solid $blanc;\r\n      //   width: 70px;\r\n      //   height: 70px;\r\n      //   position: absolute;\r\n      //   left: 50%;\r\n      //   top: 50%;\r\n      //   transition: 1s;\r\n      //   transform: translateY(-50%) translateX(-50%);\r\n      // }\r\n      // &:hover + svg {\r\n      //   -webkit-animation: 0;\r\n      //   animation: 0;\r\n      //   animation-iteration-count: 0;\r\n      // }\r\n      svg path:first-child {\r\n        // transform: scaleY(10);\r\n        transition: 0.5s;\r\n        animation-name: Scroll;\r\n        animation-duration: 3s;\r\n        animation-fill-mode: forwards;\r\n        animation-iteration-count: infinite;\r\n        animation-timing-function: ease-in-out;\r\n      }\r\n      svg path:last-child {\r\n        transition: 0.5s;\r\n        transform: scaleY(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  .paintings {\r\n    padding: 0 11.5%;\r\n    ul li:not(:first-child) {\r\n      margin-top: 20rem;\r\n    }\r\n    ul li:last-child {\r\n      margin-bottom: 10rem;\r\n    }\r\n    h2 {\r\n      margin-bottom: 2rem;\r\n    }\r\n    .paintings__painting {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      img {\r\n        width: 50%;\r\n        position: relative;\r\n        &::after {\r\n          z-index: 2;\r\n          content: \"\";\r\n          width: 150px;\r\n          height: 100px;\r\n          background-color: $primary;\r\n          position: absolute;\r\n          top: 0;\r\n          left: 0;\r\n        }\r\n      }\r\n      .painting__description {\r\n        align-self: center;\r\n        h3 {\r\n          border-bottom: 2px solid $blanc;\r\n        }\r\n        p {\r\n          width: 260px;\r\n          margin: 2rem 0;\r\n        }\r\n        .paintings__filter {\r\n          display: flex;\r\n          flex-direction: column;\r\n          input {\r\n            margin: 0;\r\n            margin-top: 0.5rem;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}